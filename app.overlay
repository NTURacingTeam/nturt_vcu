#include <zephyr/dt-bindings/sensor/sensor-channels.h>
#include <zephyr/dt-bindings/input/input-event-codes.h>
#include <zephyr/dt-bindings/input/sensor-axis.h>

#include "vcu/dt-bindings/dashboard.h"

/ {
    // sensing: sensing-node {
    //     compatible = "zephyr,sensing";
        
    //     test: test {
    //         compatible = "zephyr,sensing-phy-generic";
    //         zephyr,channels = <SENSOR_CHAN_DISTANCE>;
    //         friendly-name = "Test sensor";
    //         minimal-interval = <1000>;
    //         underlying-device = <&susp_fl>;
    //     };
    // };

    cockpit: sensor-axis-cockpit {
        compatible = "sensor-axis";
        poll-period = <10>;

        steer: steer {
            zephyr,axis = <INPUT_ABS_WHEEL>;
            out-min = <(-127)>;
            out-max = <127>;
            noise = <1000>; // 1%

            steer_encoder {
                sensor = <&steer_encoder>;
                zephyr,channel = <SENSOR_CHAN_ROTATION>;
                in-min = <(-180) 0>;
                in-max = <180 0>;
                range-tolerance = <10>; // 10%
            };
        };

        accel: accel {
            zephyr,axis = <INPUT_ABS_THROTTLE>;
            deadzone-mode = <INPUT_DEADZONE_MODE_EDGE>;
            deadzone-size = <5>; // 5%
            noise = <1000>; // 1%
            dev-tolerance = <10>; // 10%
            time-tolerance = <100>; // 100ms
            time-tolerance-decay = <20>; // 20%

            apps1_sensor_axis: apps1 {
                sensor = <&apps1>;
                zephyr,channel = <SENSOR_CHAN_ROTATION>;
                in-min = <(-60) 0>;
                in-max = <60 0>;
                range-tolerance = <10>; // 10%
            };

            apps2_sensor_axis: apps2 {
                sensor = <&apps2>;
                zephyr,channel = <SENSOR_CHAN_ROTATION>;
                in-min = <(-60) 0>;
                in-max = <60 0>;
                range-tolerance = <10>; // 10%
            };
        };

        brake: brake {
            zephyr,axis = <INPUT_ABS_BRAKE>;
            deadzone-mode = <INPUT_DEADZONE_MODE_EDGE>;
            deadzone-size = <5>; // 5%
            noise = <1000>; // 1%
            time-tolerance = <100>; // 100ms
            time-tolerance-decay = <20>; // 20%

            bse1_sensor_axis: bse1 {
                sensor = <&bse1>;
                zephyr,channel = <SENSOR_CHAN_PRESS>;
                in-min = <0 0>;
                in-max = <100 0>;
                range-tolerance = <10>; // 10%
            };

            bse2_sensor_axis: bse2 {
                sensor = <&bse2>;
                zephyr,channel = <SENSOR_CHAN_PRESS>;
                in-min = <0 0>;
                in-max = <100 0>;
                range-tolerance = <10>; // 10%
            };
        };
    };

    accel_pedal_plaus: accel-pedal-plaus {
        compatible = "nturt,accel";
        accel = <&accel>;
        brake = <&brake>;
    };

    double-tap {
        input = <&buttons>;
        compatible = "zephyr,input-double-tap";
        input-codes = <INPUT_BTN_1>, <INPUT_BTN_RTD>;
        double-tap-codes = <INPUT_BTN_MODE>, <INPUT_BTN_DISABLE>;
        double-tap-delay-ms = <300>;
    };

    longpress {
        input = <&buttons>;
        compatible = "zephyr,input-longpress";
        input-codes = <INPUT_BTN_RTD>, <INPUT_BTN_UP>,
            <INPUT_BTN_DOWN>;
        // ignore short presses using reserved code
        short-codes = <INPUT_KEY_RESERVED>, <INPUT_KEY_RESERVED>,
            <INPUT_KEY_RESERVED>;
        long-codes = <INPUT_BTN_RESET>, <INPUT_BTN_UP_HOLD>,
            <INPUT_BTN_DOWN_HOLD>;
        long-delay-ms = <1000>;
    };
};
